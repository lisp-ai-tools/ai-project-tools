  # downgrade to 0.13.2 (i.e., v0), and drop the MLMDEnv table.
  migration_schemes {
    key: 0
    value: {
      # downgrade queries from version 1
      downgrade_queries { query: " DROP TABLE IF EXISTS `MLMDEnv`; " }
      # check the tables are deleted properly
      downgrade_verification {
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'MLMDEnv'; "
        }
      }
    }
  }
  # From 0.13.2 to v1, it creates a new MLMDEnv table to track
  # schema_version.
  migration_schemes {
    key: 1
    value: {
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `MLMDEnv` ( "
               "   `schema_version` INTEGER PRIMARY KEY "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `MLMDEnv`(`schema_version`) VALUES(0); "
      }
      # v0.13.2 release
      upgrade_verification {
        # reproduce the v0.13.2 release table setup
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `Type` ( "
                 "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
                 "   `name` VARCHAR(255) NOT NULL, "
                 "   `is_artifact_type` TINYINT(1) NOT NULL, "
                 "   `input_type` TEXT, "
                 "   `output_type` TEXT "
                 " ); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `TypeProperty` ( "
                 "   `type_id` INT NOT NULL, "
                 "   `name` VARCHAR(255) NOT NULL, "
                 "   `data_type` INT NULL, "
                 " PRIMARY KEY (`type_id`, `name`)); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `Artifact` ( "
                 "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
                 "   `type_id` INT NOT NULL, "
                 "   `uri` TEXT "
                 " ); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `ArtifactProperty` ( "
                 "   `artifact_id` INT NOT NULL, "
                 "   `name` VARCHAR(255) NOT NULL, "
                 "   `is_custom_property` TINYINT(1) NOT NULL, "
                 "   `int_value` INT, "
                 "   `double_value` DOUBLE, "
                 "   `string_value` TEXT, "
                 " PRIMARY KEY (`artifact_id`, `name`, `is_custom_property`)); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `Execution` ( "
                 "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
                 "   `type_id` INT NOT NULL "
                 " ); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `ExecutionProperty` ( "
                 "   `execution_id` INT NOT NULL, "
                 "   `name` VARCHAR(255) NOT NULL, "
                 "   `is_custom_property` TINYINT(1) NOT NULL, "
                 "   `int_value` INT, "
                 "   `double_value` DOUBLE, "
                 "   `string_value` TEXT, "
                 " PRIMARY KEY (`execution_id`, `name`, `is_custom_property`)); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `Event` ( "
                 "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
                 "   `artifact_id` INT NOT NULL, "
                 "   `execution_id` INT NOT NULL, "
                 "   `type` INT NOT NULL, "
                 "   `milliseconds_since_epoch` INT "
                 " ); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE IF NOT EXISTS `EventPath` ( "
                 "   `event_id` INT NOT NULL, "
                 "   `is_index_step` TINYINT(1) NOT NULL, "
                 "   `step_index` INT, "
                 "   `step_key` TEXT "
                 " ); "
        }
        # check the new table has 1 row
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `MLMDEnv`; "
        }
      }
      # downgrade queries from version 2, drop all ContextTypes and rename
      # the `type_kind` back to `is_artifact_type` column.
      downgrade_queries {
        query: " DELETE FROM `Type` WHERE `type_kind` = 2; "
      }
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_artifact_type` TINYINT(1) NOT NULL, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT"
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `TypeTemp` SELECT * FROM `Type`; "
      }
      downgrade_queries { query: " DROP TABLE `Type`; " }
      downgrade_queries {
        query: " ALTER TABLE `TypeTemp` rename to `Type`; "
      }
      # check the tables are deleted properly
      downgrade_verification {
        # populate the `Type` table with context types.
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`name`, `type_kind`, `input_type`, `output_type`) "
                 " VALUES ('execution_type', 0, 'input', 'output'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`name`, `type_kind`, `input_type`, `output_type`) "
                 " VALUES ('artifact_type', 1, 'input', 'output'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`name`, `type_kind`, `input_type`, `output_type`) "
                 " VALUES ('context_type', 2, 'input', 'output'); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `Type` "
                 " WHERE `is_artifact_type` = 2; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` "
                 " WHERE `is_artifact_type` = 1 AND `name` = 'artifact_type'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` "
                 " WHERE `is_artifact_type` = 0 AND `name` = 'execution_type'; "
        }
      }
    }
  }
  # In v2, to support context type, and we renamed `is_artifact_type` column
  # in `Type` table.
  migration_schemes {
    key: 2
    value: {
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `type_kind` TINYINT(1) NOT NULL, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT"
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `TypeTemp` SELECT * FROM `Type`; "
      }
      upgrade_queries { query: " DROP TABLE `Type`; " }
      upgrade_queries {
        query: " ALTER TABLE `TypeTemp` rename to `Type`; "
      }
      upgrade_verification {
        # populate one ArtifactType and one ExecutionType.
        previous_version_setup_queries {
          query: " INSERT INTO `Type` (`name`, `is_artifact_type`) VALUES "
                 " ('artifact_type', 1); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`name`, `is_artifact_type`, `input_type`, `output_type`) "
                 " VALUES ('execution_type', 0, 'input', 'output'); "
        }
        # check after migration, the existing types are the same including
        # id.
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` WHERE "
                 " `id` = 1 AND `type_kind` = 1 AND `name` = 'artifact_type'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` WHERE "
                 " `id` = 2 AND `type_kind` = 0 AND `name` = 'execution_type' "
                 " AND `input_type` = 'input' AND `output_type` = 'output'; "
        }
      }
      # downgrade queries from version 3
      downgrade_queries { query: " DROP TABLE IF EXISTS `Context`; " }
      downgrade_queries {
        query: " DROP TABLE IF EXISTS `ContextProperty`; "
      }
      # check the tables are deleted properly
      downgrade_verification {
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'Context'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'ContextProperty'; "
        }
      }
    }
  }
  # In v3, to support context, we added two tables `Context` and
  # `ContextProperty`, and made no change to other existing records.
  migration_schemes {
    key: 3
    value: {
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `Context` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ContextProperty` ( "
               "   `context_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               " PRIMARY KEY (`context_id`, `name`, `is_custom_property`)); "
      }
      # check the expected table columns are created properly.
      upgrade_verification {
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `id`, `type_id`, `name` FROM `Context` "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `context_id`, `name`, `is_custom_property`, "
                 "          `int_value`, `double_value`, `string_value` "
                 "    FROM `ContextProperty` "
                 " ); "
        }
      }
      # downgrade queries from version 4
      downgrade_queries { query: " DROP TABLE IF EXISTS `Association`; " }
      downgrade_queries { query: " DROP TABLE IF EXISTS `Attribution`; " }
      # check the tables are deleted properly
      downgrade_verification {
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'Association'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'Attribution'; "
        }
      }
    }
  }
  # In v4, to support context-execution association and context-artifact
  # attribution, we added two tables `Association` and `Attribution` and
  # made no change to other existing records.
  migration_schemes {
    key: 4
    value: {
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `Association` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `context_id` INT NOT NULL, "
               "   `execution_id` INT NOT NULL, "
               "   UNIQUE(`context_id`, `execution_id`) "
               " ); "
      }
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `Attribution` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `context_id` INT NOT NULL, "
               "   `artifact_id` INT NOT NULL, "
               "   UNIQUE(`context_id`, `artifact_id`) "
               " ); "
      }
      # check the expected table columns are created properly.
      upgrade_verification {
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `id`, `context_id`, `execution_id` "
                 "   FROM `Association` "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `id`, `context_id`, `artifact_id` "
                 "   FROM `Attribution` "
                 " ); "
        }
      }
      # downgrade queries from version 5
      downgrade_queries {
        query: " CREATE TABLE `ArtifactTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `uri` TEXT "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ArtifactTemp` "
               " SELECT `id`, `type_id`, `uri` FROM `Artifact`; "
      }
      downgrade_queries { query: " DROP TABLE `Artifact`; " }
      downgrade_queries {
        query: " ALTER TABLE `ArtifactTemp` RENAME TO `Artifact`; "
      }
      downgrade_queries {
        query: " CREATE TABLE `ExecutionTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ExecutionTemp` "
               " SELECT `id`, `type_id` FROM `Execution`; "
      }
      downgrade_queries { query: " DROP TABLE `Execution`; " }
      downgrade_queries {
        query: " ALTER TABLE `ExecutionTemp` RENAME TO `Execution`; "
      }
      downgrade_queries {
        query: " CREATE TABLE `ContextTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ContextTemp` "
               " SELECT `id`, `type_id`, `name` FROM `Context`; "
      }
      downgrade_queries { query: " DROP TABLE `Context`; " }
      downgrade_queries {
        query: " ALTER TABLE `ContextTemp` RENAME TO `Context`; "
      }
      # verify if the downgrading keeps the existing columns
      downgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Artifact`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Artifact` "
                 " (`id`, `type_id`, `uri`, `state`, `name`, "
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 'uri1', 1, NULL, 0, 1); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Artifact` "
                 " (`id`, `type_id`, `uri`, `state`, `name`, "
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (2, 3, 'uri2', NULL, 'name2', 1, 0); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Execution`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Execution` "
                 " (`id`, `type_id`, `last_known_state`, `name`, "
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 1, NULL, 0, 1); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Context`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Context` "
                 " (`id`, `type_id`, `name`, "
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 'name1', 1, 0); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 2 FROM `Artifact`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Artifact` "
                 "   WHERE `id` = 1 and `type_id` = 2 and `uri` = 'uri1' "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Artifact` "
                 "   WHERE `id` = 2 and `type_id` = 3 and `uri` = 'uri2' "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Execution`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Execution` "
                 "   WHERE `id` = 1 and `type_id` = 2 "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Context` "
                 "   WHERE `id` = 1 and `type_id` = 2 "
                 " ); "
        }
      }
    }
  }
  # In v5, to support MLMD based orchestration better, we added state, time-
  # stamps, as well as user generated unique name per type to Artifact,
  # Execution and Context.
  migration_schemes {
    key: 5
    value: {
      # upgrade Artifact table
      upgrade_queries {
        query: " CREATE TABLE `ArtifactTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `uri` TEXT, "
               "   `state` INT, "
               "   `name` VARCHAR(255), "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `ArtifactTemp` (`id`, `type_id`, `uri`) "
               " SELECT * FROM `Artifact`; "
      }
      upgrade_queries { query: " DROP TABLE `Artifact`; " }
      upgrade_queries {
        query: " ALTER TABLE `ArtifactTemp` RENAME TO `Artifact`; "
      }
      # upgrade Execution table
      upgrade_queries {
        query: " CREATE TABLE `ExecutionTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `last_known_state` INT, "
               "   `name` VARCHAR(255), "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `ExecutionTemp` (`id`, `type_id`) "
               " SELECT * FROM `Execution`; "
      }
      upgrade_queries { query: " DROP TABLE `Execution`; " }
      upgrade_queries {
        query: " ALTER TABLE `ExecutionTemp` RENAME TO `Execution`; "
      }
      # upgrade Context table
      upgrade_queries {
        query: " ALTER TABLE `Context` "
               " ADD COLUMN `create_time_since_epoch` INT NOT NULL DEFAULT 0; "
      }
      upgrade_queries {
        query: " ALTER TABLE `Context` "
               " ADD COLUMN "
               "     `last_update_time_since_epoch` INT NOT NULL DEFAULT 0; "
      }
      # check the expected table columns are created properly.
      upgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Artifact`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Artifact` "
                 " (`id`, `type_id`, `uri`) VALUES (1, 2, 'uri1'); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Execution`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Execution` "
                 " (`id`, `type_id`) VALUES (1, 3); "
        }
        previous_version_setup_queries {
          query: " CREATE TABLE `Context` ( "
                 "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
                 "   `type_id` INT NOT NULL, "
                 "   `name` VARCHAR(255) NOT NULL, "
                 "   UNIQUE(`type_id`, `name`) "
                 " ); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Context` "
                 " (`id`, `type_id`, `name`) VALUES (1, 2, 'name1'); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT `id`, `type_id`, `uri`, `state`, `name`, "
                 "          `create_time_since_epoch`, "
                 "          `last_update_time_since_epoch` "
                 "   FROM `Artifact` "
                 "   WHERE `id` = 1 AND `type_id` = 2 AND `uri` = 'uri1' AND "
                 "         `create_time_since_epoch` = 0 AND "
                 "         `last_update_time_since_epoch` = 0 "
                 " ) as T1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT `id`, `type_id`, `last_known_state`, `name`, "
                 "          `create_time_since_epoch`, "
                 "          `last_update_time_since_epoch` "
                 "   FROM `Execution` "
                 "   WHERE `id` = 1 AND `type_id` = 3 AND "
                 "         `create_time_since_epoch` = 0 AND "
                 "         `last_update_time_since_epoch` = 0 "
                 " ) as T1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT `id`, `type_id`, `name`, "
                 "          `create_time_since_epoch`, "
                 "          `last_update_time_since_epoch` "
                 "   FROM `Context` "
                 "   WHERE `id` = 1 AND `type_id` = 2 AND `name` = 'name1' AND "
                 "         `create_time_since_epoch` = 0 AND "
                 "         `last_update_time_since_epoch` = 0 "
                 " ) as T1; "
        }
      }
      # downgrade queries from version 6
      downgrade_queries { query: " DROP TABLE `ParentType`; " }
      downgrade_queries { query: " DROP TABLE `ParentContext`; " }
      downgrade_queries {
        query: " CREATE TABLE `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `type_kind` TINYINT(1) NOT NULL, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT"
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `TypeTemp` "
               " SELECT `id`, `name`, `type_kind`, `input_type`, `output_type`"
               " FROM `Type`; "
      }
      downgrade_queries { query: " DROP TABLE `Type`; " }
      downgrade_queries {
        query: " ALTER TABLE `TypeTemp` RENAME TO `Type`; "
      }
      downgrade_queries { query: " DROP INDEX `idx_artifact_uri`; " }
      downgrade_queries {
        query: " DROP INDEX`idx_artifact_create_time_since_epoch`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_artifact_last_update_time_since_epoch`; "
      }
      downgrade_queries { query: " DROP INDEX `idx_event_artifact_id`; " }
      downgrade_queries { query: " DROP INDEX `idx_event_execution_id`; " }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_create_time_since_epoch`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_last_update_time_since_epoch`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_context_create_time_since_epoch`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_context_last_update_time_since_epoch`; "
      }
      # verify if the downgrading keeps the existing columns
      downgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Type`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`id`, `name`, `version`, `type_kind`, "
                 "  `description`, `input_type`, `output_type`) "
                 " VALUES (1, 't1', 'v1', 1, 'desc1', 'input1', 'output1'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`id`, `name`, `version`, `type_kind`, "
                 "  `description`, `input_type`, `output_type`) "
                 " VALUES (2, 't2', 'v2', 2, 'desc2', 'input2', 'output2'); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 2 FROM `Type`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Type` "
                 "   WHERE `id` = 1 AND `name` = 't1' AND type_kind = 1 "
                 "   AND `input_type` = 'input1' AND `output_type` = 'output1'"
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Artifact' "
                 "       AND `name` LIKE 'idx_artifact_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' "
                 "       AND `name` LIKE 'idx_event_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'ParentType'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `tbl_name` = 'ParentContext'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ParentContext' "
                 "       AND `name` LIKE 'idx_parentcontext_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Type' "
                 "       AND `name` LIKE 'idx_type_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Execution' "
                 "       AND `name` LIKE 'idx_execution_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Context' "
                 "       AND `name` LIKE 'idx_context_%'; "
        }
      }
    }
  }
  # In v6, to support parental type and parental context, we added two
  # tables `ParentType` and `ParentContext`. In addition, we added `version`
  # and `description` in the `Type` table for improving type registrations.
  # We introduce indices on Type.name, Artifact.uri, Event's artifact_id and
  # execution_id, and create_time_since_epoch, last_update_time_since_epoch
  # for all nodes.
  migration_schemes {
    key: 6
    value: {
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ParentType` ( "
               "   `type_id` INT NOT NULL, "
               "   `parent_type_id` INT NOT NULL, "
               " PRIMARY KEY (`type_id`, `parent_type_id`)); "
      }
      upgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ParentContext` ( "
               "   `context_id` INT NOT NULL, "
               "   `parent_context_id` INT NOT NULL, "
               " PRIMARY KEY (`context_id`, `parent_context_id`)); "
      }
      # upgrade Type table
      upgrade_queries {
        query: " CREATE TABLE `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `version` VARCHAR(255), "
               "   `type_kind` TINYINT(1) NOT NULL, "
               "   `description` TEXT, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT"
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `TypeTemp` "
               " (`id`, `name`, `type_kind`, `input_type`, `output_type`) "
               " SELECT * FROM `Type`; "
      }
      upgrade_queries { query: " DROP TABLE `Type`; " }
      upgrade_queries {
        query: " ALTER TABLE `TypeTemp` rename to `Type`; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_uri` "
               " ON `Artifact`(`uri`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_create_time_since_epoch` "
               " ON `Artifact`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_last_update_time_since_epoch` "
               " ON `Artifact`(`last_update_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_event_artifact_id` "
               " ON `Event`(`artifact_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_event_execution_id` "
               " ON `Event`(`execution_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               " `idx_parentcontext_parent_context_id` "
               " ON `ParentContext`(`parent_context_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_type_name` "
               " ON `Type`(`name`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_create_time_since_epoch` "
               " ON `Execution`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_last_update_time_since_epoch` "
               " ON `Execution`(`last_update_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_create_time_since_epoch` "
               " ON `Context`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_last_update_time_since_epoch` "
               " ON `Context`(`last_update_time_since_epoch`); "
      }
      # check the expected table columns are created properly.
      upgrade_verification {
        # check existing rows in previous Type table are migrated properly.
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` WHERE "
                 " `id` = 1 AND `type_kind` = 1 AND `name` = 'artifact_type'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type` WHERE "
                 " `id` = 2 AND `type_kind` = 0 AND `name` = 'execution_type' "
                 " AND `input_type` = 'input' AND `output_type` = 'output'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `type_id`, `parent_type_id` "
                 "   FROM `ParentType` "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM ( "
                 "   SELECT `context_id`, `parent_context_id` "
                 "   FROM `ParentContext` "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Artifact' "
                 "       AND `name` = 'idx_artifact_uri'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Artifact' "
                 "       AND `name` = 'idx_artifact_create_time_since_epoch'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Artifact' AND "
                 "       `name` = 'idx_artifact_last_update_time_since_epoch'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' "
                 "       AND `name` = 'idx_event_artifact_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' "
                 "       AND `name` = 'idx_event_execution_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ParentContext' "
                 "       AND `name` = 'idx_parentcontext_parent_context_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Type' "
                 "       AND `name` = 'idx_type_name'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Execution' "
                 "       AND `name` = 'idx_execution_create_time_since_epoch';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Execution' AND "
                 "       `name` = 'idx_execution_last_update_time_since_epoch';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Context' "
                 "       AND `name` = 'idx_context_create_time_since_epoch';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Context' AND "
                 "       `name` = 'idx_context_last_update_time_since_epoch';"
        }
      }
      # downgrade queries from version 7
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ArtifactPropertyTemp` ( "
               "   `artifact_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               " PRIMARY KEY (`artifact_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ArtifactPropertyTemp`  "
               " SELECT `artifact_id`, `name`,  `is_custom_property`, "
               "        `int_value`, `double_value`, `string_value` "
               " FROM `ArtifactProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ArtifactProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ArtifactPropertyTemp` "
               "  RENAME TO `ArtifactProperty`; "
      }
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ExecutionPropertyTemp` ( "
               "   `execution_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               " PRIMARY KEY (`execution_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ExecutionPropertyTemp` "
               " SELECT `execution_id`, `name`,  `is_custom_property`, "
               "     `int_value`, `double_value`, `string_value` "
               " FROM `ExecutionProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ExecutionProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ExecutionPropertyTemp` "
               "  RENAME TO `ExecutionProperty`; "
      }
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ContextPropertyTemp` ( "
               "   `context_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               " PRIMARY KEY (`context_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ContextPropertyTemp` "
               " SELECT `context_id`, `name`,  `is_custom_property`, "
               "        `int_value`, `double_value`, `string_value` "
               " FROM `ContextProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ContextProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ContextPropertyTemp` "
               "  RENAME TO `ContextProperty`; "
      }
      downgrade_queries { query: " DROP INDEX `idx_eventpath_event_id`; " }
      # verify if the downgrading keeps the existing columns
      downgrade_verification {
        previous_version_setup_queries {
          query: "DELETE FROM `ArtifactProperty`;"
        }
        previous_version_setup_queries {
          query: "DELETE FROM `ExecutionProperty`;"
        }
        previous_version_setup_queries {
          query: "DELETE FROM `ContextProperty`;"
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ArtifactProperty` (`artifact_id`, "
                 "     `is_custom_property`, `name`, `string_value`) "
                 " VALUES (1, 0, 'p1', 'abc'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ExecutionProperty` (`execution_id`, "
                 "     `is_custom_property`, `name`, `int_value`) "
                 " VALUES (1, 1, 'p1', 1); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ContextProperty` (`context_id`, "
                 "     `is_custom_property`, `name`, `double_value`) "
                 " VALUES (1, 0, 'p1', 1.0); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ArtifactProperty') "
                 " WHERE `name` = 'byte_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ExecutionProperty') "
                 " WHERE `name` = 'byte_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ContextProperty') "
                 " WHERE `name` = 'byte_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'EventPath' "
                 "       AND `name` LIKE 'idx_eventpath_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ArtifactProperty` "
                 " WHERE `artifact_id` = 1 AND `is_custom_property` = 0 AND "
                 "       `name` = 'p1' AND `string_value` = 'abc'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ExecutionProperty` "
                 " WHERE `execution_id` = 1 AND `is_custom_property` = 1 AND "
                 "        `name` = 'p1' AND `int_value` = 1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ContextProperty` "
                 " WHERE `context_id` = 1  AND `is_custom_property` = 0 AND "
                 "        `name` = 'p1' AND `double_value` = 1.0; "
        }
      }
    }
  }
  # In v7, we added byte_value for property tables for better storing binary
  # property values. In addition, we added index for `EventPath` to improve
  # Event reads.
  migration_schemes {
    key: 7
    value: {
      upgrade_queries {
        query: " ALTER TABLE `ArtifactProperty` "
               " ADD COLUMN `byte_value` BLOB; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ExecutionProperty` "
               " ADD COLUMN `byte_value` BLOB; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ContextProperty` "
               " ADD COLUMN `byte_value` BLOB; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_eventpath_event_id` "
               " ON `EventPath`(`event_id`); "
      }
      # check the expected table columns are created properly.
      upgrade_verification {
        # check existing rows in previous Type table are migrated properly.
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `ArtifactProperty` WHERE "
                 " `byte_value` IS NOT NULL; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `ExecutionProperty` WHERE "
                 " `byte_value` IS NOT NULL; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `ContextProperty` WHERE "
                 " `byte_value` IS NOT NULL; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'EventPath' AND "
                 "       `name` = 'idx_eventpath_event_id';"
        }
      }
      db_verification { total_num_indexes: 23 total_num_tables: 15 }
      # Downgrade from v8.
      downgrade_queries {
        query: " CREATE TABLE `EventTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `artifact_id` INT NOT NULL, "
               "   `execution_id` INT NOT NULL, "
               "   `type` INT NOT NULL, "
               "   `milliseconds_since_epoch` INT "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `EventTemp` "
               " (`id`, `artifact_id`, `execution_id`, `type`, "
               " `milliseconds_since_epoch`) "
               " SELECT * FROM `Event`; "
      }
      downgrade_queries { query: " DROP TABLE `Event`; " }
      downgrade_queries {
        query: " ALTER TABLE `EventTemp` RENAME TO `Event`; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_event_artifact_id` "
               " ON `Event`(`artifact_id`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_event_execution_id` "
               " ON `Event`(`execution_id`); "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_artifact_property_int`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_artifact_property_double`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_artifact_property_string`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_property_int`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_property_double`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_property_string`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_context_property_int`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_context_property_double`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_context_property_string`; "
      }
      downgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Event`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Event` "
                 " (`id`, `artifact_id`, `execution_id`, `type`, "
                 " `milliseconds_since_epoch`) "
                 " VALUES (1, 1, 1, 1, 1); "
        }
        previous_version_setup_queries { query: "DELETE FROM `EventPath`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `EventPath` "
                 " (`event_id`, `is_index_step`, `step_index`, `step_key`) "
                 " VALUES (1, 1, 1, 'a'); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Event` "
                 " WHERE `artifact_id` = 1 AND `execution_id` = 1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `EventPath` "
                 " WHERE `event_id` = 1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' AND "
                 "       `name` = 'idx_event_artifact_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' AND "
                 "       `name` = 'idx_event_execution_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'EventPath' AND "
                 "       `name` = 'idx_eventpath_event_id'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ArtifactProperty' "
                 "       AND `name` LIKE 'idx_artifact_property_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ExecutionProperty' "
                 "       AND `name` LIKE 'idx_execution_property_%'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ContextProperty' "
                 "       AND `name` LIKE 'idx_context_property_%'; "
        }
      }
    }
  }
  # In v8, we added index for `ArtifactProperty`, `ExecutionProperty`,
  # `ContextProperty` to improve property queries on name, and unique
  # constraint on Event table for (`artifact_id`, `execution_id`, `type`).
  migration_schemes {
    key: 8
    value: {
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_int` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_double` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_string` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_int` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_double` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_string` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_int` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_double` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_string` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      upgrade_queries {
        query: " CREATE TABLE `EventTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `artifact_id` INT NOT NULL, "
               "   `execution_id` INT NOT NULL, "
               "   `type` INT NOT NULL, "
               "   `milliseconds_since_epoch` INT, "
               "   UNIQUE(`artifact_id`, `execution_id`, `type`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT OR IGNORE INTO `EventTemp` "
               " (`id`, `artifact_id`, `execution_id`, `type`, "
               " `milliseconds_since_epoch`) "
               " SELECT * FROM `Event` ORDER BY `id` desc; "
      }
      upgrade_queries { query: " DROP TABLE `Event`; " }
      upgrade_queries {
        query: " ALTER TABLE `EventTemp` RENAME TO `Event`; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_event_execution_id` "
               " ON `Event`(`execution_id`); "
      }
      upgrade_queries {
        query: " DELETE FROM `EventPath` "
               "   WHERE event_id not in ( SELECT `id` from Event ) "
      }
      upgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Event`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Event` "
                 " (`id`, `artifact_id`, `execution_id`, `type`, "
                 " `milliseconds_since_epoch`) "
                 " VALUES (1, 1, 1, 1, 1); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `Event` "
                 " (`id`, `artifact_id`, `execution_id`, `type`, "
                 " `milliseconds_since_epoch`) "
                 " VALUES (2, 1, 1, 1, 2); "
        }
        previous_version_setup_queries { query: "DELETE FROM `EventPath`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `EventPath` "
                 " (`event_id`, `is_index_step`, `step_index`, `step_key`) "
                 " VALUES (1, 1, 1, 'a'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `EventPath` "
                 " (`event_id`, `is_index_step`, `step_index`, `step_key`) "
                 " VALUES (2, 1, 1, 'b'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `EventPath` "
                 " (`event_id`, `is_index_step`, `step_index`, `step_key`) "
                 " VALUES (2, 1, 2, 'c'); "
        }
        # check event table unique constraint is applied and event path
        # records are deleted.
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Event` "
                 " WHERE `artifact_id` = 1 AND `execution_id` = 1 "
                 "     AND `type` = 1;"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Event` "
                 "   WHERE `id` = 2 AND `artifact_id` = 1 AND  "
                 "       `execution_id` = 1 AND `type` = 1 "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 2 FROM `EventPath` "
                 " WHERE `event_id` = 2; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `EventPath` "
                 " WHERE `event_id` = 2 AND `step_key` = 'b'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `EventPath` "
                 " WHERE `event_id` = 2 AND `step_key` = 'c'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `EventPath` "
                 " WHERE `event_id` = 1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 2 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' AND "
                 "       `name` = 'idx_event_artifact_id';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'Event' AND "
                 "       `name` = 'idx_event_execution_id';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'EventPath' AND "
                 "       `name` = 'idx_eventpath_event_id';"
        }
        # check indexes are added.
        post_migration_verification_queries {
          query: " SELECT count(*) = 3 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ArtifactProperty' "
                 "       AND `name` LIKE 'idx_artifact_property_%';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 3 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ExecutionProperty' "
                 "       AND `name` LIKE 'idx_execution_property_%';"
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 3 FROM `sqlite_master` "
                 " WHERE `type` = 'index' AND `tbl_name` = 'ContextProperty' "
                 "       AND `name` LIKE 'idx_context_property_%';"
        }
      }
      db_verification { total_num_indexes: 32 total_num_tables: 15 }
  # downgrade queries from version 9
      downgrade_queries { query: " DROP INDEX `idx_type_external_id`; " }
      downgrade_queries {
        query: " DROP INDEX `idx_artifact_external_id`; "
      }
      downgrade_queries {
        query: " DROP INDEX `idx_execution_external_id`; "
      }
      downgrade_queries { query: " DROP INDEX `idx_context_external_id`; " }
      downgrade_queries {
        query: " CREATE TABLE `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `version` VARCHAR(255), "
               "   `type_kind` TINYINT(1) NOT NULL, "
               "   `description` TEXT, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT"
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `TypeTemp` "
               " SELECT `id`, `name`, `version`, `type_kind`, `description`,"
               "        `input_type`, `output_type` "
               " FROM `Type`; "
      }
      downgrade_queries { query: " DROP TABLE `Type`; " }
      downgrade_queries {
        query: " ALTER TABLE `TypeTemp` rename to `Type`; "
      }
      downgrade_queries {
        query: " CREATE TABLE `ArtifactTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `uri` TEXT, "
               "   `state` INT, "
               "   `name` VARCHAR(255), "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ArtifactTemp` "
               " SELECT `id`, `type_id`, `uri`, `state`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               "FROM `Artifact`; "
      }
      downgrade_queries { query: " DROP TABLE `Artifact`; " }
      downgrade_queries {
        query: " ALTER TABLE `ArtifactTemp` RENAME TO `Artifact`; "
      }
      downgrade_queries {
        query: " CREATE TABLE `ExecutionTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `last_known_state` INT, "
               "   `name` VARCHAR(255), "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ExecutionTemp` "
               " SELECT `id`, `type_id`, `last_known_state`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               " FROM `Execution`; "
      }
      downgrade_queries { query: " DROP TABLE `Execution`; " }
      downgrade_queries {
        query: " ALTER TABLE `ExecutionTemp` RENAME TO `Execution`; "
      }
      downgrade_queries {
        query: " CREATE TABLE `ContextTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      downgrade_queries {
        query: " INSERT INTO `ContextTemp` "
               " SELECT `id`, `type_id`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               " FROM `Context`; "
      }
      downgrade_queries { query: " DROP TABLE `Context`; " }
      downgrade_queries {
        query: " ALTER TABLE `ContextTemp` RENAME TO `Context`; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_uri` "
               " ON `Artifact`(`uri`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_create_time_since_epoch` "
               " ON `Artifact`(`create_time_since_epoch`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_last_update_time_since_epoch` "
               " ON `Artifact`(`last_update_time_since_epoch`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_type_name` "
               " ON `Type`(`name`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_create_time_since_epoch` "
               " ON `Execution`(`create_time_since_epoch`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_last_update_time_since_epoch` "
               " ON `Execution`(`last_update_time_since_epoch`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_create_time_since_epoch` "
               " ON `Context`(`create_time_since_epoch`); "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_last_update_time_since_epoch` "
               " ON `Context`(`last_update_time_since_epoch`); "
      }
      # verify if the downgrading keeps the existing columns
      downgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Type`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` "
                 " (`id`, `name`, `version`, `type_kind`, "
                 "  `description`, `input_type`, `output_type`, `external_id`) "
                 " VALUES (1, 't1', 'v1', 1, 'desc1', 'input1', 'output1', "
                 "           'type_1'); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Artifact`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Artifact` "
                 " (`id`, `type_id`, `uri`, `state`, `name`, `external_id`,"
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 'uri1', 1, NULL, 'artifact_1', 0, 1); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Execution`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Execution` "
                 " (`id`, `type_id`, `last_known_state`, `name`, `external_id`,"
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 1, NULL, 'execution_1', 0, 1); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Context`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Context` "
                 " (`id`, `type_id`, `name`, `external_id`,"
                 "  `create_time_since_epoch`, `last_update_time_since_epoch`) "
                 " VALUES (1, 2, 'name1', 'context_1', 1, 0); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Type`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Type` "
                 "   WHERE `id` = 1 AND `name` = 't1' AND type_kind = 1 "
                 "   AND `input_type` = 'input1' AND `output_type` = 'output1'"
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Artifact`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Artifact` "
                 "   WHERE `id` = 1 and `type_id` = 2 and `uri` = 'uri1' "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `Execution`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Execution` "
                 "   WHERE `id` = 1 and `type_id` = 2 "
                 " ); "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM `Context`; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM ( "
                 "   SELECT * FROM `Context` "
                 "   WHERE `id` = 1 and `type_id` = 2 "
                 " ); "
        }
      }
    }
  }
  # In v9, to store the ids that come from the clients' system (like Vertex
  # Metadata), we added a new column `external_id` in the `Type` \
  # `Artifacrt` \ `Execution` \ `Context` tables. We introduce unique and
  # null-filtered indices on Type.external_id, Artifact.external_id,
  # Execution's external_id and Context's external_id.
  migration_schemes {
    key: 9
    value: {
      upgrade_queries {
        query: " CREATE TABLE `TypeTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `version` VARCHAR(255), "
               "   `type_kind` TINYINT(1) NOT NULL, "
               "   `description` TEXT, "
               "   `input_type` TEXT, "
               "   `output_type` TEXT, "
               "   `external_id` VARCHAR(255) UNIQUE"
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `TypeTemp` (`id`, `name`, `version`, `type_kind`, "
               "        `description`, `input_type`, `output_type`) "
               " SELECT `id`, `name`, `version`, `type_kind`, `description`,"
               "        `input_type`, `output_type` "
               " FROM `Type`; "
      }
      upgrade_queries { query: " DROP TABLE `Type`; " }
      upgrade_queries {
        query: " ALTER TABLE `TypeTemp` rename to `Type`; "
      }
      upgrade_queries {
        query: " CREATE TABLE `ArtifactTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `uri` TEXT, "
               "   `state` INT, "
               "   `name` VARCHAR(255), "
               "   `external_id` VARCHAR(255) UNIQUE, "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `ArtifactTemp` (`id`, `type_id`, `uri`, `state`, "
               "        `name`, `create_time_since_epoch`, "
               "        `last_update_time_since_epoch`) "
               " SELECT `id`, `type_id`, `uri`, `state`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               "FROM `Artifact`; "
      }
      upgrade_queries { query: " DROP TABLE `Artifact`; " }
      upgrade_queries {
        query: " ALTER TABLE `ArtifactTemp` RENAME TO `Artifact`; "
      }
      upgrade_queries {
        query: " CREATE TABLE `ExecutionTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `last_known_state` INT, "
               "   `name` VARCHAR(255), "
               "   `external_id` VARCHAR(255) UNIQUE, "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `ExecutionTemp` (`id`, `type_id`, "
               "        `last_known_state`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch`) "
               " SELECT `id`, `type_id`, `last_known_state`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               " FROM `Execution`; "
      }
      upgrade_queries { query: " DROP TABLE `Execution`; " }
      upgrade_queries {
        query: " ALTER TABLE `ExecutionTemp` RENAME TO `Execution`; "
      }
      upgrade_queries {
        query: " CREATE TABLE `ContextTemp` ( "
               "   `id` INTEGER PRIMARY KEY AUTOINCREMENT, "
               "   `type_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `external_id` VARCHAR(255) UNIQUE, "
               "   `create_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   `last_update_time_since_epoch` INT NOT NULL DEFAULT 0, "
               "   UNIQUE(`type_id`, `name`) "
               " ); "
      }
      upgrade_queries {
        query: " INSERT INTO `ContextTemp` (`id`, `type_id`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch`) "
               " SELECT `id`, `type_id`, `name`, "
               "        `create_time_since_epoch`, "
               "        `last_update_time_since_epoch` "
               " FROM `Context`; "
      }
      upgrade_queries { query: " DROP TABLE `Context`; " }
      upgrade_queries {
        query: " ALTER TABLE `ContextTemp` RENAME TO `Context`; "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_uri` "
               " ON `Artifact`(`uri`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_create_time_since_epoch` "
               " ON `Artifact`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_artifact_last_update_time_since_epoch` "
               " ON `Artifact`(`last_update_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_type_name` "
               " ON `Type`(`name`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_create_time_since_epoch` "
               " ON `Execution`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_execution_last_update_time_since_epoch` "
               " ON `Execution`(`last_update_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_create_time_since_epoch` "
               " ON `Context`(`create_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS "
               "   `idx_context_last_update_time_since_epoch` "
               " ON `Context`(`last_update_time_since_epoch`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_type_external_id` "
               " ON `Type`(`external_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_external_id` "
               " ON `Artifact`(`external_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_external_id` "
               " ON `Execution`(`external_id`); "
      }
      upgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_external_id` "
               " ON `Context`(`external_id`); "
      }
      # check the expected table columns are created properly.
      # table type is using the old schema for upgrade verification, which
      # contains `is_artifact_type` column
      upgrade_verification {
        previous_version_setup_queries { query: "DELETE FROM `Type`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Type` (`name`, `is_artifact_type`) VALUES "
                 " ('artifact_type', 1); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Artifact`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Artifact` "
                 " (`id`, `type_id`) "
                 " VALUES (1, 2); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Execution`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Execution` "
                 " (`id`, `type_id`) "
                 " VALUES (1, 2); "
        }
        previous_version_setup_queries { query: "DELETE FROM `Context`;" }
        previous_version_setup_queries {
          query: " INSERT INTO `Context` "
                 " (`id`, `type_id`, `name`) "
                 " VALUES (1, 2, 'name1'); "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM `Type`; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM ( "
                 "   SELECT * FROM `Type` "
                 "   WHERE `name` = 'artifact_type' AND "
                 "         `external_id` IS NULL "
                 " ) AS T1; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM `Artifact`; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM ( "
                 "   SELECT * FROM `Artifact` "
                 "   WHERE `id` = 1 AND `type_id` = 2 AND "
                 "         `external_id` IS NULL "
                 " ) AS T1; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM `Execution`; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM ( "
                 "   SELECT * FROM `Execution` "
                 "   WHERE `id` = 1 AND `type_id` = 2 AND "
                 "          `external_id` IS NULL "
                 " ) AS T1; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM `Context`; "
        }
        post_migration_verification_queries {
          query: " SELECT COUNT(*) = 1 FROM ( "
                 "   SELECT * FROM `Context` "
                 "   WHERE `id` = 1 AND `type_id` = 2 AND `name` = 'name1' AND "
                 "         `external_id` IS NULL "
                 " ) as T1; "
        }
      }
      db_verification { total_num_indexes: 40 total_num_tables: 15 }
      # downgrade queries from version 10
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ArtifactPropertyTemp` ( "
               "   `artifact_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               "   `byte_value` BLOB, "
               " PRIMARY KEY (`artifact_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ArtifactPropertyTemp`  "
               " SELECT `artifact_id`, `name`,  `is_custom_property`, "
               "        `int_value`, `double_value`, `string_value`, "
               "        `byte_value` "
               " FROM `ArtifactProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ArtifactProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ArtifactPropertyTemp` "
               "  RENAME TO `ArtifactProperty`; "
      }
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ExecutionPropertyTemp` ( "
               "   `execution_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               "   `byte_value` BLOB, "
               " PRIMARY KEY (`execution_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ExecutionPropertyTemp` "
               " SELECT `execution_id`, `name`,  `is_custom_property`, "
               "     `int_value`, `double_value`, `string_value`, "
               "     `byte_value` "
               " FROM `ExecutionProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ExecutionProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ExecutionPropertyTemp` "
               "  RENAME TO `ExecutionProperty`; "
      }
      downgrade_queries {
        query: " CREATE TABLE IF NOT EXISTS `ContextPropertyTemp` ( "
               "   `context_id` INT NOT NULL, "
               "   `name` VARCHAR(255) NOT NULL, "
               "   `is_custom_property` TINYINT(1) NOT NULL, "
               "   `int_value` INT, "
               "   `double_value` DOUBLE, "
               "   `string_value` TEXT, "
               "   `byte_value` BLOB, "
               " PRIMARY KEY (`context_id`, `name`, `is_custom_property`)); "
      }
      downgrade_queries {
        query: " INSERT INTO `ContextPropertyTemp` "
               " SELECT `context_id`, `name`,  `is_custom_property`, "
               "        `int_value`, `double_value`, `string_value`, "
               "        `byte_value` "
               " FROM `ContextProperty`; "
      }
      downgrade_queries { query: " DROP TABLE `ContextProperty`; " }
      downgrade_queries {
        query: " ALTER TABLE `ContextPropertyTemp` "
               "  RENAME TO `ContextProperty`; "
      }
      # recreate the indices that were dropped along with the old tables
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_int` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_double` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_artifact_property_string` "
               " ON `ArtifactProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_int` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_double` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_execution_property_string` "
               " ON `ExecutionProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_int` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `int_value`) "
               " WHERE `int_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_double` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `double_value`) "
               " WHERE `double_value` IS NOT NULL; "
      }
      downgrade_queries {
        query: " CREATE INDEX IF NOT EXISTS `idx_context_property_string` "
               " ON `ContextProperty`(`name`, `is_custom_property`, "
               " `string_value`) "
               " WHERE `string_value` IS NOT NULL; "
      }
      # verify that downgrading keeps the existing columns
      downgrade_verification {
        previous_version_setup_queries {
          query: "DELETE FROM `ArtifactProperty`;"
        }
        previous_version_setup_queries {
          query: "DELETE FROM `ExecutionProperty`;"
        }
        previous_version_setup_queries {
          query: "DELETE FROM `ContextProperty`;"
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ArtifactProperty` (`artifact_id`, "
                 "     `is_custom_property`, `name`, `string_value`) "
                 " VALUES (1, 0, 'p1', 'abc'); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ExecutionProperty` (`execution_id`, "
                 "     `is_custom_property`, `name`, `int_value`) "
                 " VALUES (1, 1, 'p1', 1); "
        }
        previous_version_setup_queries {
          query: " INSERT INTO `ContextProperty` (`context_id`, "
                 "     `is_custom_property`, `name`, `double_value`) "
                 " VALUES (1, 0, 'p1', 1.0); "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ArtifactProperty') "
                 " WHERE `name` = 'proto_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ArtifactProperty') "
                 " WHERE `name` = 'bool_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ExecutionProperty') "
                 " WHERE `name` = 'proto_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ExecutionProperty') "
                 " WHERE `name` = 'bool_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ContextProperty') "
                 " WHERE `name` = 'proto_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 0 FROM "
                 "        PRAGMA_TABLE_INFO('ContextProperty') "
                 " WHERE `name` = 'bool_value'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ArtifactProperty` "
                 " WHERE `artifact_id` = 1 AND `is_custom_property` = 0 AND "
                 "       `name` = 'p1' AND `string_value` = 'abc'; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ExecutionProperty` "
                 " WHERE `execution_id` = 1 AND `is_custom_property` = 1 AND "
                 "        `name` = 'p1' AND `int_value` = 1; "
        }
        post_migration_verification_queries {
          query: " SELECT count(*) = 1 FROM `ContextProperty` "
                 " WHERE `context_id` = 1  AND `is_custom_property` = 0 AND "
                 "        `name` = 'p1' AND `double_value` = 1.0; "
        }
      }
    }
  }
  # In v10, we added proto_value and bool_value columns to {X}Property tables
  migration_schemes {
    key: 10
    value: {
      upgrade_queries {
        query: " ALTER TABLE `ArtifactProperty` "
               " ADD COLUMN `proto_value` BLOB; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ArtifactProperty` "
               " ADD COLUMN `bool_value` BOOLEAN; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ExecutionProperty` "
               " ADD COLUMN `proto_value` BLOB; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ExecutionProperty` "
               " ADD COLUMN `bool_value` BOOLEAN; "
      }
      upgrade_queries {
        query: " ALTER TABLE `ContextProperty` "
               " ADD COLUMN `proto_value` BLOB;"
      }
      upgrade_queries {
        query: " ALTER TABLE `ContextProperty` "
               " ADD COLUMN `bool_value` BOOLEAN; "
      }
      db_verification { total_num_indexes: 40 total_num_tables: 15 }
    }
  }
